#
# MoVRs:  a bash script to run the MoVRs workflow.
#              Motif set reduction and validation.
#
# Last update: September 24, 2019.  Volker Brendel.
#

debug=false	# set to true for code development
shopt -s extglob


# Set the install directory (the below assumes that the MoVRs script
# is in the same directory as the MoVRs.conf file):
#
installdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
workingdir="$( pwd )"


# Setting up which steps in the workflow to run (Default: all)
#
declare -a steps2run
steps2run=(step1 step2 step3 step4 step5 step6 step7)
startfromstep=""
stopatstep=""
runonlystep=""


# Default option settings:
#
peakorbedfile=""
backgroundfile=""
genomedir=""
genomeID=""
fastafile=""
geneIDfile=""
promoterset="unknown"
sizestring=200
lengthstring="8,10,12"
nummotifs=25
kfold=10
numproc=1
mmquality=1e-10
keepnmotifs="all"
ttthreshold=1e-3
minpresence="default"
outputdir=./
configfile=$installdir/MoVRs.conf

MoVRsDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
input="unclear"

function usage() {
  echo "
    Usage: $0 <input with either -a, -f, or -i> <genome and background settings> [options]

    Examples:
      $0 -a testpeakfile --genome ./TestGenome -o TEST1 --size [-60,40] -p 10 >& errTEST1
      $0 -a testpeakfile --genome ./TestGenome -o TEST1 --size [-60,40] -p 10 --minpresence 7 --startfromstep step5 >& errTEST1AGAIN
      $0 -a testpeakfile -G hg19 -o TEST2 --size [-60,40] -k 5 -p 10 >& errTEST2
      $0 -f testfastafile -b Background/testbackground -S 10 -k 3 -p 9 --outputdir TEST3 >& errTEST3
      $0 -i testidfile -r human -G hg19 --size [-200,100] -S 15 -k 4 -p 8 --outputdir TEST4 >& errTEST4

    MoVRs will determine candidate motifs in a several-steps workflow.  You can specify
    partial workflow execution by specifying \"stepX\" [X = 1, 2, ..., 7] as argument to 
    --startfromstep, --stopatstep, or --runonlystep.

    Step 1  Setting up training and validation sets
    Step 2  HOMER de novo motif finding in training sets
    Step 3  Motif extraction, filtering, and comparison
    Step 4  Generating motif clusters
    Step 5  Derivation of consensus motifs
    Step 6  MoVRs motif presentation and annotation
    Step 7  Find MoVRs consensus motifs in regions of interest

    To see more help, type \"$0 -h\" or \"$0 --help\".
  "

  if [[ $1 != 'short' ]]; then
    echo "
      You must specify input in one of three forms:
        1a) -a/-g or -a/-G combination    (peak or BED file and genome file or identifier)
        1b) -f/-b combination             (FASTA target and background files)
        1c) -i/-r/-G combination          (GeneID file and preprocessed promoter set as well as genome identifier)

      Other options default to the specified values if not set.
      Details:

      1a) peak or BED file input to HOMER:
        -a|--annotation <peak|BED file>   Input file specifying genomic regions of interest
        -b|--background <peak|BED file>   (Non-mandatory) file specifying background regions
        -g|--genome <path>                Path to chromosome files
        -G|--Genome <identifier>          Identifier of HOMER-preprocessed genome
      1b) FASTA file input to HOMER:
        -f|--fasta <path>                 FASTA-formatted input file with regions of interest
        -b|--background <path>            (Mandatory) FASTA-formatted file with background regions
      1c) Gene identifier and promoter input to HOMER:
        -i|--geneID <file>                List file of gene identifiers
        -r|--promoter <file>              (Mandatory) Corresponding HOMER-supported promoter set identifier
                                            [Choice: human, mouse, rat, fly, worm, zebrafish, or yeast]
      2) Window and motif length and number input to HOMER
        -s|--size <string>                HOMER size argument (<#> or <[#,#]> or \"given\") [Default: 200]
        -l|--length <string>              HOMER motif length argument (<#> or <#>,<#>,...) [Default: 8,10,12]
        -S|--nummotifs <#>                HOMER argument for the number of motifs of each length to find) [Default: 25]
      3) MoVRs-specific options:
        -k <#>                            Conduct <#>-fold crossv-validation [Default: 10]
        -p|--numproc <#>                  Use <#> processors during execution [Default: 1]; ideally a multipe of the -k argument.
        -m|--mmquality <1e-#>             Minimum motif quality for motif to be considered [Default: 1e-3]
        -n|--keepnmotifs <#>              Maximum number of motifs above mmquality to keep for each training set [Default: all]
        -t|--ttthreshold <1e-#>           Threshold for tomtom motif similarity [Default: 1e-3]
        --minpresence <#>                 Minimal number of training sets in which a MoVRs motif must occur [Default: -k argument minus 1]
        -o|--outputdir <path>             Put output into directory <path> [Default: ./]
        -c|--configfile <path>            Configuration file [Default: $configfile]
      4) MoVRs workflow settings; <step> below must be one of (step1, step2, ..., step7)
         --startfromstep <string>	  Starting step; previous steps must have run successfully before.
         --stopatstep <string>            Last step to execute
         --runonlystep <string>           Workflow step to execute; previous steps must have run successfully before.
      5) Else:
        -h|--help                         Show this usage information
    "
  fi
}
if [ -z "$*" ] ; then usage short ; exit 1 ; fi


function readconfigfile {
# Read the specified ($1) MoVRs configuration file:
if [ ! -e "$1" ] ; then
  echo ""
  echo "Fatal error: MoVRs config file $1  does not exist.  Please check."
  exit 1
fi

findMotifsOptions=`grep '^findMotifsOptions=' "$1" | awk -F"=" '{print $2}'`
findMotifsGenomeOptions=`grep '^findMotifsGenomeOptions=' "$1" | awk -F"=" '{print $2}'`
annotatePeaksOptions=`grep '^annotatePeaksOptions=' "$1" | awk -F"=" '{print $2}'`
homer2Options=`grep '^homer2Options=' "$1" | awk -F"=" '{print $2}'`
MotifSetReduceOptions=`grep '^MotifSetReduceOptions=' "$1" | awk -F"=" '{print $2}'`
tomtomOptions=`grep '^tomtomOptions=' "$1" | awk -F"=" '{print $2}'`
}



##### Process command line arguments: #####
#

OPTIONS=`getopt -o a:b:g:G:f:i:r:s:l:S:k:p:m:n:t:o:c:h --long annotation:,background:,genome:,Genome:,fasta:,geneID:,promoter:,size:,length:,nummotifs:,kfold:,numproc:,mmquality:,keepnmotifs:,ttthreshold:,minpresence:,outputdir:,configfile:,startfromstep:,stopatstep:,runonlystep:,help -n 'MoVRs error' -- "$@"`
if [ $? != 0 ] ; then echo " " ; echo "Could not parse options (see above) ..." >&2 ; usage short ; exit 1 ; fi

eval set -- "$OPTIONS"

if [[ $debug == 'true' ]] ; then
  echo ""
  echo "OPTIONS string:"
  echo $OPTIONS
  echo ""
fi

while true ; do
  case "$1" in
    -a|--annotation)
      case "$2" in
        -*) echo "Please provide a peak or bedfile when using -a"; usage short; exit 1 ;;
         *) peakorbedfile=$2 ; shift 2 ;;
      esac ;;

    -b|--background)
      case "$2" in
        -*) echo "Please provide a background file when using -b"; usage short; exit 1 ;;
         *) backgroundfile=$2 ; shift 2 ;;
      esac ;;

    -g|--genome)
      case "$2" in
        -*) echo "Please provide a genome directory when using -g"; usage short; exit 1 ;;
         *) genomedir=$2 ; shift 2 ;;
      esac ;;

    -G|--genomeID)
      case "$2" in
        -*) echo "Please provide a HOMER genomeID when using -G"; usage short; exit 1 ;;
         *) genomeID=$2 ; shift 2 ;;
      esac ;;

    -f|--fasta)
      case "$2" in
        -*) echo "Please provide a FASTA-formatted sequence file when using -f"; usage short; exit 1 ;;
         *) fastafile=$2 ; shift 2 ;;
      esac ;;

    -i|--geneID)
      case "$2" in
        -*) echo "Please provide a geneID file when using -i"; usage short; exit 1 ;;
         *) geneIDfile=$2 ; shift 2 ;;
      esac ;;

    -r|--promoter)
      case "$2" in
        -*) echo "Please provide a promoter file when using -r"; usage short; exit 1 ;;
         *) promoterset=$2 ; shift 2 ;;
      esac ;;

    -s|--size)
      case "$2" in
        -*) echo "Please provide a HOMER size string when using -s as <#>, <[#,#]>, or \"given\""; usage short; exit 1 ;;
         *) sizestring=$2 ; shift 2 ;;
      esac ;;

    -l|--length)
      case "$2" in
        -*) echo "Please provide a HOMER motif length string when using -l"; usage short; exit 1 ;;
         *) lengthstring=$2 ; shift 2 ;;
      esac ;;

    -S|--nummotifs)
      case "$2" in
        -*) echo "Please provide the number of motifs to find when using -S"; usage short; exit 1 ;;
         *) nummotifs=$2 ; shift 2 ;;
      esac ;;

    -k|--kfold)
      case "$2" in
        -*) echo "Please provide the number of desired crossfolds when using -k"; usage short; exit 1 ;;
         *) kfold=$2 ; shift 2 ;;
      esac ;;

    -p|--numproc)
      case "$2" in
        -*) echo "Please provide the number of available processors when using -p"; usage short; exit 1 ;;
         *) numproc=$2 ; shift 2 ;;
      esac ;;

    -m|--mmquality)
      case "$2" in
        -*) echo "Please provide a value for minimum motif quality when using -m"; usage short; exit 1 ;;
         *) mmquality=$2 ; shift 2 ;;
      esac ;;

    -n|--keepnmotifs)
      case "$2" in
        -*) echo "Please provide the number of motifs to keep when using -n"; usage short; exit 1 ;;
         *) keepnmotifs=$2 ; shift 2 ;;
      esac ;;

    -t|--ttthreshold)
      case "$2" in
        -*) echo "Please provide a value for the tomtom similarity threshold when using -t"; usage short; exit 1 ;;
         *) ttthreshold=$2 ; shift 2 ;;
      esac ;;

    --minpresence)
      case "$2" in
        -*) echo "Please provide a value for minimal motif presence when using --minpresence"; usage short; exit 1 ;;
         *) minpresence=$2 ; shift 2 ;;
      esac ;;

    -o|--outputdir)
      case "$2" in
        -*) echo "Please designate an output directory when using -o"; usage short; exit 1 ;;
         *) outputdir=$2 ; shift 2 ;;
      esac ;;

    -c|--configfile)
      case "$2" in
        -*) echo "Please provide a MoVRs configfile when using -c"; usage short; exit 1 ;;
         *) configfile=$2 ; shift 2 ;;
      esac ;;

    --startfromstep)
      case "$2" in
        -*) echo "Please designate the MoVRs workflow step from which to start."; usage short; exit 1 ;;
         *) startfromstep=$2 ; shift 2 ;;
      esac ;;

    --stopatstep)
      case "$2" in
        -*) echo "Please designate the last MoVRs workflow step to execute."; usage short; exit 1 ;;
         *) stopatstep=$2 ; shift 2 ;;
      esac ;;

    --runonlystep)
      case "$2" in
        -*) echo "Please designate the MoVRs workflow step to execute."; usage short; exit 1 ;;
         *) runonlystep=$2 ; shift 2 ;;
      esac ;;

    -h|--help)
      usage long; exit 1 ;;

    --) shift ; break ;;

     *) echo "Unknown error." ; usage short; exit 1 ;;
  esac
done


numthreads=$(( $numproc / $kfold ))
if [ $numthreads == 0 ] ; then numthreads=1 ; fi
if [ $minpresence == 'default' ] ; then
  minpresence=$(($kfold-1))
fi

if [[ $debug == 'true' ]] ; then
  echo "Variable values:"
  echo ""
  echo "peakorbedfile	=	$peakorbedfile"
  echo "backgroundfile	=	$backgroundfile"
  echo "genomedir	=	$genomedir"
  echo "genomeID	=	$genomeID"
  echo "fastafile	=	$fastafile"
  echo "geneIDfile	=	$geneIDfile"
  echo "promoterset	=	$promoterset"
  echo "sizestring	=	$sizestring"
  echo "lengthstring	=	$lengthstring"
  echo "nummotifs	=	$nummotifs"
  echo "kfold		=	$kfold"
  echo "numproc		=	$numproc"
  echo "numthreads	=	$numthreads"
  echo "mmquality	=	$mmquality"
  echo "keepnmotifs	=	$keepnmotifs"
  echo "ttthreshold	=	$ttthreshold"
  echo "minpresence	=	$minpresence"
  echo "outputdir	=	$outputdir"
  echo "startfromstep	=	$startfromstep"
  echo "stopatstep	=	$stopatstep"
  echo "runonlystep	=	$runonlystep"
  echo "configfile	=	$configfile"
fi

readconfigfile $configfile

if [[ $peakorbedfile != '' ]] ; then
  if [[ $genomedir == ''  &&  $genomeID == '' ]] ; then
    echo ""
    echo "Option -a requires use of option -g or -G.  Please adjust."
    usage short
    exit
  fi
  echo ""
  echo "Going ahead with the MoVRs cross-validation and motif reduction aproach"
  echo "for the following HOMER command (run this for output comparision if desired):"
  echo ""
  if [[ $genomedir != '' ]] ; then
    genome=$(readlink -f ${genomedir})
  else
    genome=$genomeID
  fi
# Check for presence of [] characters:
  if [[ "$sizestring" != [1-9][0-9]* ]] && [[ "$sizestring" != "["*"]" ]] && [[ "$sizestring" != "given" ]] ; then
    echo "Please provide a HOMER size string when using -a and -s as <#>, <[#,#]>, or \"given\""
     usage short
     exit 1
  fi
# Remove [] characters:
  sizestring=${sizestring#[};
  sizestring=${sizestring%]}
  echo "  findMotifsGenome.pl $peakorbedfile $genome $outputdir -size $sizestring -len $lengthstring -S $nummotifs -p $numthreads $findMotifsGenomeOptions"
  echo ""
  input=peakorbedfile

elif [[ $fastafile != '' ]] ; then
  fastafile=$(readlink -f ${fastafile})
  if [[ $backgroundfile == '' ]] ; then
    echo ""
    echo "Option -f requires use of option -b.  Please adjust."
    usage short
    exit
  else
    backgroundfile=$(readlink -f ${backgroundfile})
  fi
  echo ""
  echo "Going ahead with"
  echo "  findMotifs.pl $fastafile fasta $outputdir -fasta $backgroundfile -len $lengthstring -S $nummotifs -p $numthreads $findMotifsOptions"
  echo ""
  input=fastafile

elif [[ $geneIDfile != '' ]]; then
  echo ""
  if [[ ! ($promoterset == 'human'  ||  $promoterset == 'mouse'  ||  $promoterset == 'rat'  ||  $promoterset == 'fly'  ||  $promoterset == 'worm'  ||  $promoterset == 'zebrafish'  ||  $promoterset == 'yeast') ]] ; then
    echo ""
    echo "Promoter set \"$promoterset\" not found."
    echo "Please specify one of (human, mouse, rat, fly, worm, zebrafish, yeast) or construct your own"
    echo "promoter set following HOMER instructions and add its label to the $0 script as allowable choice."
    exit
  elif [[ $genomeID == '' ]] ; then
    echo ""
    echo "Please specifify a valid genomeID with option -G."
    usage short
    exit
  fi
# Check for presence of [] characters:
  if [[ "$sizestring" != "["*"]" ]] ; then
    echo "Please provide a HOMER size string when using -i and -s as <[#,#]>"
     usage short
     exit 1
  fi
  start=${sizestring%,*}; start=${start##[};
  end=${sizestring#*,}; end=${end%%]}
  echo ""
  echo "Going ahead with"
  echo "  findMotifs.pl $geneIDfile $promoterset $outputdir -start $start -end $end -len $lengthstring -S $nummotifs -p $numthreads $findMotifsOptions"
  echo ""
  input=geneIDfile
fi


if [[ $startfromstep != '' ]] ; then
  i=-1
  for step in ${steps2run[@]} ; do
    ((++i))
    if [[ $step != $startfromstep ]] ; then unset steps2run[$i] ; else break ; fi
  done
fi

unsetflag=0
if [[ $stopatstep != '' ]] ; then
  for step in ${steps2run[@]} ; do
    ((++i))
    if [[ $step == $stopatstep ]] ; then unsetflag=1 ; ((--i))
    else  if [[ $unsetflag == 1 ]] ; then unset steps2run[$i] ; fi ;  fi
  done
fi

if [[ $runonlystep != '' ]] ; then
  steps2run=($runonlystep)
fi

if [[ $debug == 'true' ]] ; then
  echo ""
  echo "Additional arguments:"
  echo ""
  for arg; do echo $arg; done
  echo ""
fi

if [[ $debug == 'true' ]] ; then echo "steps2run: ${steps2run[*]}" ; fi


#########################################
#Step 0			                #
#Setting up				#
#########################################

runstep0=1	# Step 0 will always be run (unless we change the code otherwise at some point)
runstep1=0
runstep2=0
runstep3=0
runstep4=0
runstep5=0
runstep6=0
runstep7=0
for step in ${steps2run[@]} ; do
  if [[ $step == "step1" ]] ; then runstep1=1 ; fi
  if [[ $step == "step2" ]] ; then runstep2=1 ; fi
  if [[ $step == "step3" ]] ; then runstep3=1 ; fi
  if [[ $step == "step4" ]] ; then runstep4=1 ; fi
  if [[ $step == "step5" ]] ; then runstep5=1 ; fi
  if [[ $step == "step6" ]] ; then runstep6=1 ; fi
  if [[ $step == "step7" ]] ; then runstep7=1 ; fi
done

if [ $runstep0 == 1 ] ; then
  echo ""
  echo "MoVRs: Now running step 0 ..."
  if [ ! -d "${outputdir}" ] ; then
    mkdir ${outputdir}
  fi
  if [[ $minpresence -gt $kfold ]] ; then
    echo "--minpresence argument must not exceed -k argument.  Adjusted to $kfold."
    minpresence=$kfold
  fi
  if [ $runstep1 == 1 ] ; then
    echo "MoVRs: you will run step 1"
  fi
  if [ $runstep2 == 1 ] ; then
    echo "MoVRs: you will run step 2"
  fi
  if [ $runstep3 == 1 ] ; then
    echo "MoVRs: you will run step 3"
  fi
  if [ $runstep4 == 1 ] ; then
    echo "MoVRs: you will run step 4"
  fi
  if [ $runstep5 == 1 ] ; then
    echo "MoVRs: you will run step 5"
  fi
  if [ $runstep6 == 1 ] ; then
    echo "MoVRs: you will run step 6"
  fi
  if [ $runstep7 == 1 ] ; then
    echo "MoVRs: you will run step 7"
  fi
  echo ""
  echo "================================================================================"
fi


#########################################
#Step 1			                #
#Setting up training and validation sets#
#########################################

if [ $runstep1 == 1 ] ; then
  echo "MoVRs: Now running step 1 (setting up training and validation sets) ..."
  echo ""
  cd ${workingdir}
  echo "You have chosen $kfold-fold cross-validation"

  if [ -d "${outputdir}/tmpTrainingDir" ] ; then
    if [ ! -d "${outputdir}/Step1ResultsBACKUP" ] ; then
      mkdir ${outputdir}/Step1ResultsBACKUP
      mv ${outputdir}/tmpTrainingDir ${outputdir}/tmpValidationDir ${outputdir}/Step1ResultsBACKUP
      echo ""
      echo "NOTE: Previous results in ${outputdir}/tmpTrainingDir and ${outputdir}/tmpValidationDir"
      echo "      are being saved in ${outputdir}/Step1ResultsBACKUP."
      echo ""
    else
      echo "There are already previous MoVRs step 1 results in ${outputdir}/Step1ResultsBACKUP."
      echo "Please discard or save elsewhere, as this rerun will save the present tmpTrainingDir and"
      echo "tmpValidationDir directories in ${outputdir}/Step1ResultsBACKUP before re-running step 1"
      echo "with current parameters."
      exit
    fi
  fi

  if [ ! -d "${outputdir}/tmpValidationDir" ] ; then
    mkdir ${outputdir}/tmpValidationDir
  fi
  if [ ! -d "${outputdir}/tmpTrainingDir" ] ; then
    mkdir ${outputdir}/tmpTrainingDir
  fi

  if [[ $input == 'peakorbedfile' ]] ; then
    grep "^[^#]" $peakorbedfile > tmp.txt	#ignore comment lines
    shuf -o tmp.new tmp.txt
    echo ""
    echo "MoVRs_Split.sh tmp.new $kfold subset ..."
    echo ""
    bash $installdir/MoVRs_Split.sh tmp.new $kfold subset	#split $peakorbedfile into k subsets of equal size
    if [ "$?" -eq "1" ] ; then
      echo "Fatal error running MoVRs_Split.sh.  Please check."
      exit 1
    fi
  fi

  if [[ $input == 'fastafile' ]] ; then
    grep "^>" $fastafile | cut -c2- | cut -d" " -f1 > tmp.txt	#ignore comments
    shuf -o tmp.new tmp.txt
    echo ""
    echo "MoVRs_Split.sh tmp.new $kfold tmplist ..."
    echo ""
    bash $installdir/MoVRs_Split.sh tmp.new $kfold tmplist	#split $fastafile into k subsets of equal size
    if [ "$?" -eq "1" ] ; then
      echo "Fatal error running MoVRs_Split.sh.  Please check."
      exit 1
    fi
    echo ""
    echo "Using BLAST to create subset FASTA files ..."
    makeblastdb -in $fastafile -dbtype nucl -parse_seqids -out TMP
    for file in tmplist.[0-1][0-9] ; do
      blastdbcmd -db TMP -entry_batch $file > ${file/tmplist/subset}
    done
    \rm TMP.* tmplist.[0-1][0-9]
  fi

  if [[ $input == 'geneIDfile' ]] ; then
    grep "^[^#]" $geneIDfile > tmp.txt	#ignore comment lines
    shuf -o tmp.new tmp.txt
    echo ""
    echo "MoVRs_Split.sh tmp.new $kfold subset ..."
    echo ""
    bash $installdir/MoVRs_Split.sh tmp.new $kfold subset	#split $geneIDfile into k subsets of equal size
    if [ "$?" -eq "1" ] ; then
      echo "Fatal error running MoVRs_Split.sh.  Please check."
      exit 1
    fi
  fi

  for file in subset* ; do
    mv $file ${file/./}
  done	#change file name e.g. subset.01 changed into subset01
  mv subset* ${outputdir}/tmpValidationDir
  \rm tmp.txt tmp.new

  cd ${outputdir}/tmpValidationDir

  for file in subset[0-1][0-9] ; do
    cat -- !($file) > ../tmpTrainingDir/${file/subset/trainingSet}
  done	# concatenate remaining files as training sets, leaving one subset out in turn

  cd ..
  echo ""
  echo "MoVRs: Done with step 1 (setting up training and validation sets)."
  echo "       Output from this step is in directories ${outputdir}/tmpTrainingDir"
  echo "       and ${outputdir}/tmpValidationDir."
  echo ""
  echo "================================================================================"
fi


#########################################################
#Step 2							#
#Use HOMER to predict motifs in regions in training set #
#########################################################

if [ $runstep2 == 1 ] ; then
  echo "MoVRs: Now running step 2 (HOMER de novo motif finding in training sets) ..."
  echo ""
  cd ${workingdir}

  cd ${outputdir}/tmpTrainingDir
  if [ -d "HOMER_trainingSet00" ] ; then
    if [ ! -d "Step2ResultsBACKUP" ] ; then
      mkdir Step2ResultsBACKUP
      mv HOMER* Step2ResultsBACKUP
      echo ""
      echo "NOTE: Previous HOMER results are being saved in Step2ResultsBACKUP."
      echo ""
    else
      echo "There are already previous MoVRs step 2 results in Step2ResultsBACKUP."
      echo "Please discard or save elsewhere, as this rerun will save the present"
      echo "HOMER results as Step2ResultsBACKUP before re-running step 2 with"
      echo "current parameters."
      exit
    fi
  fi
  
  for file in trainingSet[0-1][0-9] ; do

    if [[ $input == 'peakorbedfile' ]] ; then
      echo "findMotifsGenome.pl $file $genome HOMER_${file} -len $lengthstring -size $sizestring -p $numthreads $findMotifsGenomeOptions"
      sem -j $numproc "findMotifsGenome.pl $file $genome HOMER_${file} -len $lengthstring -size $sizestring -p $numthreads $findMotifsGenomeOptions >& HOMERlogfile_${file}; echo  done with findMotifsGenome.pl for ${file} ...;"
    fi

    if [[ $input == 'fastafile' ]] ; then
      echo "findMotifs.pl $file fasta HOMER_${file} -fasta $backgroundfile -len $lengthstring -S $nummotifs -p $numthreads $findMotifsOptions"
      sem -j $numproc "findMotifs.pl $file fasta HOMER_${file} -fasta $backgroundfile -len $lengthstring -S $nummotifs -p $numthreads $findMotifsOptions >& HOMERlogfile_${file}; echo done with findMotifs.pl for ${file} ...;"
    fi

    if [[ $input == 'geneIDfile' ]] ; then
      echo "  findMotifs.pl $file $promoterset HOMER_${file} -start $start -end $end -len $lengthstring -S $nummotifs -p $numthreads $findMotifsOptions"
      sem -j $numproc "findMotifs.pl $file $promoterset HOMER_${file} -start $start -end $end -len $lengthstring -S $nummotifs -p $numthreads $findMotifsOptions >& HOMERlogfile_${file}; echo  done with findMotifs.pl for ${file} ...;"
    fi

  done
  sem --wait

  if [ ! -d "../tmpMotifDir" ] ; then
    mkdir ../tmpMotifDir
  fi
  echo "... the HOMER output is in directory tmpMotifDir." >> ../tmpMotifDir/README.txt

  for file in trainingSet[0-1][0-9] ; do
    cp HOMER_${file}/homerMotifs.all.motifs ../tmpMotifDir/${file}motifs.homer
  done
  cd ..
  echo ""
  echo "MoVRs: Done with step 2 (HOMER de novo motif finding in training sets)."
  echo "       Output from this step is in directory ${outputdir}/tmpMotifDir."
  echo ""
  echo "================================================================================"
fi


########################################################
#Step 3						       #
#Convert homer motif to meme format and run Tomtom     #
########################################################

if [ $runstep3 == 1 ] ; then
  echo "MoVRs: Now running step 3 (motif extraction, filtering, and comparison) ..."
  echo ""
  cd ${workingdir}

  cd ${outputdir}/tmpMotifDir
  if [ ! -d "TOMTOMresults" ] ; then
    mkdir TOMTOMresults
  else
    if [ ! -d "Step3ResultsBACKUP" ] ; then
      mv TOMTOMresults Step3ResultsBACKUP
      mv TOMTOMlogfile *.meme Step3ResultsBACKUP
      mkdir TOMTOMresults
      echo ""
      echo "NOTE: Previous results in TOMTOMresults are being saved in Step3ResultsBACKUP."
      echo ""
    else
      echo "There are already previous MoVRs step 3 results in Step3ResultsBACKUP."
      echo "Please discard or save elsewhere, as this rerun will save the present"
      echo "TOMTOMresults directory as Step3ResultsBACKUP before re-running step 3"
      echo "with current parameters."
      exit
    fi
  fi
  for file in *motifs.homer ; do
    outfmeme=${file/homer/meme}
    echo "Rscript ${installdir}/MoVRs_Motif2meme.R $file $outfmeme"
    Rscript ${installdir}/MoVRs_Motif2meme.R $file $outfmeme
    if [ $keepnmotifs != "all" ] ; then
      outfkept=${outfmeme/motifs/motifsKept}
      echo ""
      echo "python ${installdir}/MoVRs_ExtractMotif.py -i $outfmeme -k $keepnmotifs -o $outfkept"
      python ${installdir}/MoVRs_ExtractMotif.py -i $outfmeme -k $keepnmotifs -o $outfkept
      if [ "$?" -eq "1" ] ; then
        echo "Fatal error running MoVRs_ExtractMotif.py.  Please check."
        exit 1
      else
        echo "... done"
      fi
      echo ""
    fi
  done	# convert HOMER motifs to meme format and (optionally) keep top n motifs only
  
  AllMotifsFile="AllMotifs.meme"
  if [ $keepnmotifs != "all" ] ; then
    cat trainingSet*motifsKept.meme > ${AllMotifsFile}
  else
    cat trainingSet*motifs.meme > ${AllMotifsFile}
  fi

  FilteredMotifsFile="FilteredMotifs.meme"
  echo ""
  echo "python ${installdir}/MoVRs_ExtractMotif.py -i ${AllMotifsFile} -t $mmquality -o ${FilteredMotifsFile}"
  python ${installdir}/MoVRs_ExtractMotif.py -i ${AllMotifsFile} -t $mmquality -o ${FilteredMotifsFile}
  if [ "$?" -eq "1" ] ; then
    echo "Fatal error running MoVRs_ExtractMotif.py.  Please check."
    exit 1
  else
    echo "... done"
  fi
  echo ""

  FilteredMotifsFileFP=$(readlink -f ${FilteredMotifsFile})
  echo ""
  echo "tomtom -thresh $ttthreshold -evalue $tomtomOptions $FilteredMotifsFileFP $FilteredMotifsFileFP >& TOMTOMlogfile"
  tomtom -thresh $ttthreshold -evalue $tomtomOptions $FilteredMotifsFileFP $FilteredMotifsFileFP >& TOMTOMlogfile
  if [ "$?" -eq "1" ] ; then
    echo "Fatal error running tomtom.  Please check."
    exit 1
  else
    echo "... done"
  fi
  #Let's clear out any old results if still present:
  #
  if [ -d "TOMTOMresults" ] ; then
    \rm -rf TOMTOMresults
  fi
  mv tomtom_out TOMTOMresults
  cd ..
  echo ""
  echo "MoVRs: Done with step 3 (motif extraction, filtering, and comparison)."
  echo "       Output from this step is in directories ${outputdir}/tmpMotifDir"
  echo "       and ${outputdir}/tmpMotifDir/TOMTOMresults."
  echo ""
  echo "================================================================================"
fi


######################################################
#Step 4						     #
#Graphical clustering of training motifs             #
######################################################

if [ $runstep4 == 1 ] ; then
  echo "MoVRs: Now running step 4 (generating motif clusters) ..."
  echo ""
  cd ${workingdir}

  cd ${outputdir}/tmpMotifDir
  if [ ! -d "MCLUSTERresults" ] ; then
    mkdir MCLUSTERresults
  else
    if [ ! -d "Step4ResultsBACKUP" ] ; then
      mv MCLUSTERresults Step4ResultsBACKUP
      mkdir MCLUSTERresults
      echo ""
      echo "NOTE: Previous results in MCLUSTERresults are being saved in Step4ResultsBACKUP."
      echo ""
    else
      echo "There are already previous MoVRs step 4 results in Step4ResultsBACKUP."
      echo "Please discard or save elsewhere, as this rerun will save the present"
      echo "MCLUSTERresults directory as Step4ResultsBACKUP before re-running step 4"
      echo "with current parameters."
      exit
    fi
  fi
  FilteredMotifsFile="FilteredMotifs.meme"
  FilteredMotifsFileFP=$(readlink -f ${FilteredMotifsFile})

  cut -f 1,2 TOMTOMresults/tomtom.tsv > motifgraph_edgelist
  mv motifgraph_edgelist MCLUSTERresults/
  cd MCLUSTERresults
  echo "MCLUSTERresults contains results of motif clustering and merging" >> README.txt
  #extract motif clusters in graph
  echo "python ${installdir}/MoVRs_GetCluster.py -i motifgraph_edgelist -t $minpresence"
  python ${installdir}/MoVRs_GetCluster.py -i motifgraph_edgelist -t $minpresence
  if [ "$?" -eq "1" ] ; then
    echo "Fatal error running MoVRs_GetCluster.py.  Please check."
    echo ""
    exit 1
  fi

  mclusters=$(ls mcluster*.list)
  if [[ $mclusters ]]; then
    echo "... motif clusters were successfully extracted."
  else
    echo ""
    echo "No motif clusters were extracted. Please check output in ${outputdir}/tmpMotifDir/MCLUSTERresults."
    echo "If no program errors occurred, then this means that no motif clusters were found at the"
    echo "selected threshold of --minpresence = $minpresence.  You may wish to consider re-starting MoVRs"
    echo "with a lower threshold and flag --startfromstep step4."
    exit 0
  fi

  for file in mcluster*.list ; do
    echo "python ${installdir}/MoVRs_ExtractMotif.py -i ${FilteredMotifsFileFP} -n $file -o ${file/list/meme}"
    python ${installdir}/MoVRs_ExtractMotif.py -i ${FilteredMotifsFileFP} -n $file -o ${file/list/meme}
    if [ "$?" -eq "1" ] ; then
      echo "Fatal error running MoVRs_ExtractMotif.py.  Please check."
      echo ""
      exit 1
    fi
  done
  echo "mcluster*.meme are meme motifs extracted from similarity graph clusters." >> README.txt

  cd ../..
  echo ""
  echo "MoVRs: Done with step 4 (generating motif clusters)."
  echo "       Output from this step is in directory ${outputdir}/tmpMotifDir/MCLUSTERresults."
  echo ""
  echo "================================================================================"
fi


#############################################
#Step 5 				    #
#Generate consensus motifs for each mcluster#
#############################################

if [ $runstep5 == 1 ] ; then
  echo "MoVRs: Now running step 5 (derivation of consensus motifs) ..."
  echo ""
  cd ${workingdir}

  cd ${outputdir}/tmpMotifDir/MCLUSTERresults
  echo "mcluster.*cmotif contains the consensus motifs for each mcluster" >> README.txt

  if [ -e "mcluster1.cmotif" ] ; then
    if [ ! -d "Step5ResultsBACKUP" ] ; then
      mkdir Step5ResultsBACKUP
      mv mcluster*.cmotif Step5ResultsBACKUP
      echo ""
      echo "NOTE: Previous results are being saved in Step5ResultsBACKUP."
      echo ""
    else
      echo "There are already previous MoVRs step 5 results in Step5ResultsBACKUP."
      echo "Please discard or save elsewhere, as this rerun will save the present"
      echo "MotifSetReduce results as Step5ResultsBACKUP before re-running step 5 with"
      echo "current parameters."
      exit
    fi
  fi

  for file in mcluster*.meme ; do
    echo "${installdir}/MoVRs_MotifSetReduce.pl -m $file $MotifSetReduceOptions > ${file/meme/cmotif}"
    ${installdir}/MoVRs_MotifSetReduce.pl -m $file $MotifSetReduceOptions > ${file/meme/cmotif}
    if [ "$?" -eq "1" ] ; then
      echo "Fatal error running MoVRs_MotifSetReduce.pl.  Please check."
      echo ""
      exit 1
    fi
  done

  cd ../..
  echo ""
  echo "MoVRs: Done with step 5 (derivation of consensus motifs)."
  echo "       Output from this step is in directory ${outputdir}/tmpMotifDir/MCLUSTERresults."
  echo ""
  echo "================================================================================"
fi


##################################################################
#Step 6							 	 #
#Convert consensus motif to homer format and run compareMotifs.pl#
##################################################################

if [ $runstep6 == 1 ] ; then
  echo "MoVRs: Now running step 6 (MoVRs motif presentation and annotation) ..."
  echo ""
  cd ${workingdir}

  if [ ! -d "${outputdir}/MoVRs_OutputDir" ] ; then
    mkdir ${outputdir}/MoVRs_OutputDir
  else
    if [ ! -d "Step6ResultsBACKUP" ] ; then
      mv ${outputdir}/MoVRs_OutputDir ${outputdir}/Step6ResultsBACKUP
      mkdir ${outputdir}/MoVRs_OutputDir
      echo ""
      echo "NOTE: Previous results in ${outputdir}/MoVRs_OutputDir are being saved in ${outputdir}/Step6ResultsBACKUP."
      echo ""
    else
      echo "There are already previous MoVRs step 6 results in Step6ResultsBACKUP."
      echo "Please discard or save elsewhere, as this rerun will save the present"
      echo "MoVRs_OutputDir directory as Step6ResultsBACKUP before re-running step 6"
      echo "with current parameters."
      exit
    fi
  fi
  if [ ! -d "${outputdir}/MoVRs_OutputDir/SeqLogoDir" ] ; then
    mkdir ${outputdir}/MoVRs_OutputDir/SeqLogoDir
  fi

  cd ${outputdir}/tmpMotifDir/MCLUSTERresults

  for file in *.cmotif ; do
    echo "Rscript ${installdir}/MoVRs_SeqLogo4mcluster.R $file ../../MoVRs_OutputDir"
    Rscript ${installdir}/MoVRs_SeqLogo4mcluster.R $file ../../MoVRs_OutputDir
    echo "python ${installdir}/MoVRs_Consensus2homer.py -i $file -o ../../MoVRs_OutputDir/${file/cmotif/homer}"
    python ${installdir}/MoVRs_Consensus2homer.py -i $file -o ../../MoVRs_OutputDir/${file/cmotif/homer}
    if [ "$?" -eq "1" ] ; then
      echo "Fatal error running MoVRs_Consensus2homer.py.  Please check."
      echo ""
      exit 1
    fi
  done

  cd ../../MoVRs_OutputDir
  \mv mcluster*cmotif*.png SeqLogoDir/
  if [ ! -d "HomerDir" ] ; then
    mkdir HomerDir
  fi
  if [ ! -d "LogfileDir" ] ; then
    mkdir LogfileDir
  fi
  for file in *.homer; do
    outdir=HOMER_${file/.homer/}
    logfile=HOMERlogfile_${file/.homer/}
    echo "compareMotifs.pl $file $outdir >& $logfile"
    sem -j $numproc "compareMotifs.pl $file $outdir >& $logfile; echo done with compareMotifs.pl for ${file} ...;"
  done
  sem --wait

  \mv HOMER_* HomerDir/
  \mv HOMERlogfile* LogfileDir/

  echo ""
  echo "MoVRs: Done with step 6 (MoVRs motif presentation and annotation)."
  echo "       Output from this step is in directory ${outputdir}/MoVRs_OutputDir."
  echo ""
  echo "================================================================================"
fi


##################################################################
#Step 7							 	 #
#Find MoVRs consensus motifs in regions of interest              #
##################################################################

if [ $runstep7 == 1 ] ; then
  echo "MoVRs: Now running step 7 ..."
  echo ""
  cd ${workingdir}

  cd ${outputdir}/MoVRs_OutputDir
  for file in mcluster*.homer ; do
    outfile=${file/.homer/.tab}
    logfile=ANNOTATIONlogfile_${file/.homer/}

    if [[ $input == 'peakorbedfile' ]] ; then
      echo "annotatePeaks.pl ${workingdir}/$peakorbedfile $genome -m $file $annotatePeaksOptions 2> $logfile 1> $outfile"
      sem -j $numproc "annotatePeaks.pl ${workingdir}/$peakorbedfile $genome -m $file $annotatePeaksOptions 2> $logfile 1> $outfile; echo done with annotatePeaks.pl for ${file} ...;"
    fi

    if [[ $input == 'fastafile' ]] ; then
      echo "homer2 find -i $fastafile -m $file -p $numthreads $homer2Options 2> $logfile 1> $outfile"
      sem -j $numproc "homer2 find -i $fastafile -m $file -p $numthreads $homer2Options 2> $logfile 1> $outfile; echo done with homer2 for ${file} ...;"
    fi

    if [[ $input == 'geneIDfile' ]] ; then
      echo "annotatePeaks.pl tss $genomeID -list ${workingdir}/$geneIDfile -m $file $annotatePeaksOptions 2> $logfile 1> $outfile"
      sem -j $numproc "annotatePeaks.pl tss $genomeID -list ${workingdir}/$geneIDfile -m $file $annotatePeaksOptions 2> $logfile 1> $outfile; echo done with annotatePeaks.pl for ${file} ...;"
    fi

  done
  sem --wait

  \mv ANNOTATIONlogfile* LogfileDir/
  cd ..
  echo ""
  echo "================================================================================"
fi
exit
